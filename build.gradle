buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id 'org.spongepowered.mixin' version '0.7.+'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = '0.0.1-1.18.2-Forge'
group = 'net.phoboss.mirage' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mirage'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'parchment', version: '2022.08.07-1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mirage'

            mods {
                mirage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mirage'

            mods {
                mirage {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mirage'

            mods {
                mirage {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mirage', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mirage {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    flatDir {
        dirs 'libs'
    }

    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.18:3.0.57')

    compileOnly( fg.deobf("curse.maven:oculus-581495:4578744"))
    compileOnly( fg.deobf("curse.maven:embeddium-908741:5067973"))//https://modrinth.com/mod/embeddium/version/0.3.0+mc1.18.2
    compileOnly( fg.deobf("curse.maven:framedblocks-441647:4567924"))
    compileOnly( fg.deobf("com.simibubi:create:1.18.2-0.5.1.f"))
    compileOnly( fg.deobf("net.phoboss:decobeacons:0.0.1-1.18.2-Forge"))

    runtimeOnly fg.deobf("net.phoboss:decobeacons:0.0.1-1.18.2-Forge")
    runtimeOnly fg.deobf("com.simibubi:create:1.18.2-0.5.1.f")
    //runtimeOnly fg.deobf("com.jozufozu:flywheel:forge-1.18.2-0.6.8.a")
    //runtimeOnly fg.deobf("rbasamoyai:createbigcannons:forge-1.18.2-0.5.4-nightly-4eb8cfe")
    runtimeOnly fg.deobf("com.github.talrey:createdeco:1.3.3-1.18.2")

    runtimeOnly fg.deobf("dev:architectury:4.11.93-forge")
    runtimeOnly fg.deobf("org.valkyrienskies:eureka:1.4.0-beta.1")
    runtimeOnly fg.deobf("kotlin:kotlinforforge:3.12.0-all")
    runtimeOnly fg.deobf("org.valkyrienskies:valkyrienskies:118-2.1.1-beta.5")

    //runtimeOnly fg.deobf("dan200.computercraft:cc-tweaked:1.18.2-1.101.3")
    //runtimeOnly fg.deobf("io.github.techtastic:cc_vs:1.18.2-forge-0.0.8")

    runtimeOnly fg.deobf("curse.maven:botania-225643:3936568")
    runtimeOnly fg.deobf("curse.maven:curios-309927:4590652")
    runtimeOnly fg.deobf("curse.maven:patchouli-306770:3846086")

    runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:4412849")

    runtimeOnly fg.deobf("curse.maven:framedblocks-441647:4567924")

    //runtimeOnly "maven.modrinth:c7m1mi73:vxZXdQPK"//https://modrinth.com/mod/packet-fixer/version/vxZXdQPK //added to fix server error: "Tried to read NBT tag that was too big"

    //COMMENTOUT when running in server//
    /*runtimeOnly fg.deobf("curse.maven:oculus-581495:4578744")
    runtimeOnly fg.deobf("curse.maven:embeddium-908741:5067973")
    //runtimeOnly fg.deobf("curse.maven:rubidium-574856:4494903")

    runtimeOnly fg.deobf("curse.maven:minemaresurection-596719:3831181")
    runtimeOnly fg.deobf("curse.maven:cmdcam-251244:4426920")
    runtimeOnly fg.deobf("curse.maven:creativecore-257814:4629846")*/

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mirage",
                "Specification-Vendor"    : "miragesareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "miragesareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
